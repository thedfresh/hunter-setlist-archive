generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EventType {
  id             Int      @id @default(autoincrement())
  name           String
  includeInStats Boolean  @default(true) @map("include_in_stats")
  createdAt      DateTime @default(now()) @map("created_at")
  events         Event[]

  @@map("event_types")
}

model ContentType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  events    Event[]

  @@map("content_types")
}

model Band {
  id              Int      @id @default(autoincrement())
  name            String
  createdAt       DateTime @default(now()) @map("created_at")
  publicNotes     String?  @map("public_notes")
  privateNotes    String?  @map("private_notes")
  events          Event[]  @relation("PrimaryBand")
  bandMusicians   BandMusician[]

  @@map("bands")
}

model BandMusician {
  id         Int      @id @default(autoincrement())
  bandId     Int      @map("band_id")
  musicianId Int      @map("musician_id")
  joinedDate DateTime? @map("joined_date")
  leftDate   DateTime? @map("left_date")
  createdAt  DateTime @default(now()) @map("created_at")
  publicNotes  String? @map("public_notes")
  privateNotes String? @map("private_notes")  
  band       Band     @relation(fields: [bandId], references: [id])
  musician   Musician @relation(fields: [musicianId], references: [id])
  
  @@unique([bandId, musicianId])
  @@map("band_musicians")
}

model Venue {
  id            Int      @id @default(autoincrement())
  name          String
  city          String?
  stateProvince String?  @map("state_province")
  country       String?
  isUncertain   Boolean  @default(false) @map("is_uncertain")
  createdAt     DateTime @default(now()) @map("created_at")
  publicNotes  String? @map("public_notes")
  privateNotes String? @map("private_notes")  
  context       String?
  events        Event[]
  links         Link[]

  @@map("venues")
}

model Musician {
  id                   Int                         @id @default(autoincrement())
  name                 String
  isUncertain          Boolean                     @default(false) @map("is_uncertain")
  createdAt            DateTime                    @default(now()) @map("created_at")
  publicNotes  String? @map("public_notes")
  privateNotes String? @map("private_notes")  
  eventMusicians       EventMusician[]
  defaultInstruments   MusicianDefaultInstrument[]
  performanceMusicians PerformanceMusician[]
  performanceVocals    Performance[]               @relation("PerformanceLeadVocals")
  bandMusicians        BandMusician[]
  @@map("musicians")
}

model Instrument {
  id                   Int                         @id @default(autoincrement())
  name                 String
  displayName          String                      @map("display_name")
  createdAt            DateTime                    @default(now()) @map("created_at")
  eventMusicians       EventMusician[]
  musicianDefaults     MusicianDefaultInstrument[]
  performanceMusicians PerformanceMusician[]

  @@map("instruments")
}

model Event {
  id                           Int                @id @default(autoincrement())
  year                         Int?
  month                        Int?
  day                          Int?
  displayDate                  String?            @map("display_date")
  dateUncertain                Boolean            @default(false) @map("date_uncertain")
  venueId                      Int?               @map("venue_id")
  venueUncertain               Boolean            @default(false) @map("venue_uncertain")
  eventTypeId                  Int?               @map("event_type_id")
  contentTypeId                Int?               @map("content_type_id")
  primaryBandId                Int?               @map("primary_band_id")
  showTiming                   String?            @map("show_timing") 
  rawData                      String?            @map("raw_data")
  rawDataGdsets                String?            @map("raw_data_gdsets")
  hunterParticipationUncertain Boolean            @default(false) @map("hunter_participation_uncertain")
  billing                      String?
  etreeShowId                  String?            @map("etree_show_id")
  isSpurious                   Boolean            @default(false) @map("is_spurious")
  publicNotes                  String?            @map("public_notes")
  privateNotes                 String?            @map("private_notes")  
  includeInStats               Boolean            @default(true) @map("include_in_stats")
  verified                     Boolean            @default(false)
  createdAt                    DateTime           @default(now()) @map("created_at")
  updatedAt                    DateTime           @default(now()) @updatedAt @map("updated_at")
  isUncertain                  Boolean            @default(false) @map("is_uncertain")
  isPublic                     Boolean            @default(true)  @map("is_public")
  eventContributors            EventContributor[]
  eventMusicians               EventMusician[]
  contentType                  ContentType?       @relation(fields: [contentTypeId], references: [id])
  eventType                    EventType?         @relation(fields: [eventTypeId], references: [id])
  primaryBand                  Band?              @relation("PrimaryBand", fields: [primaryBandId], references: [id])
  venue                        Venue?             @relation(fields: [venueId], references: [id])
  links                        Link[]
  recordings                   Recording[]
  sets                         Set[]

  @@map("events")
}

model EventMusician {
  id           Int         @id @default(autoincrement())
  eventId      Int         @map("event_id")
  musicianId   Int         @map("musician_id")
  instrumentId Int?        @map("instrument_id")
  publicNotes  String?     @map("public_notes")
  privateNotes String?     @map("private_notes")  
  createdAt    DateTime    @default(now()) @map("created_at")
  event        Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  instrument   Instrument? @relation(fields: [instrumentId], references: [id])
  musician     Musician    @relation(fields: [musicianId], references: [id])

  @@map("event_musicians")
}

model SetType {
  id             Int      @id @default(autoincrement())
  name           String
  displayName    String   @map("display_name")
  includeInStats Boolean  @default(true) @map("include_in_stats")
  createdAt      DateTime @default(now()) @map("created_at")
  sets           Set[]

  @@map("set_types")
}

model Set {
  id           Int           @id @default(autoincrement())
  eventId      Int           @map("event_id")
  setTypeId    Int           @map("set_type_id")
  position     Int
  publicNotes  String?       @map("public_notes")
  privateNotes String?       @map("private_notes")  
  createdAt    DateTime      @default(now()) @map("created_at")
  isUncertain  Boolean       @default(false) @map("is_uncertain")
  performances Performance[]
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  setType      SetType       @relation(fields: [setTypeId], references: [id])

  @@map("sets")
}

model Album {
  id          Int         @id @default(autoincrement())
  title       String
  artist      String?
  releaseYear Int?        @map("release_year")
  isOfficial  Boolean     @default(true) @map("is_official")
  publicNotes  String?       @map("public_notes")
  privateNotes String?       @map("private_notes")  
  createdAt   DateTime    @default(now()) @map("created_at")
  songAlbums  SongAlbum[]

  @@map("albums")
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  songTags    SongTag[]

  @@map("tags")
}

model Song {
  id             Int           @id @default(autoincrement())
  title          String
  alternateTitle String?       @map("alternate_title") 
  originalArtist String?       @map("original_artist")
  lyricsBy       String?       @map("lyrics_by")
  musicBy        String?       @map("music_by")
  isUncertain    Boolean       @default(false) @map("is_uncertain")
  publicNotes  String?       @map("public_notes")
  privateNotes String?       @map("private_notes")  
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at")
  inBoxOfRain    Boolean       @default(false) @map("in_box_of_rain")
  links          Link[]
  performances   Performance[]
  songAlbums     SongAlbum[]
  songTags       SongTag[]

  @@map("songs")
}

model SongAlbum {
  id          Int      @id @default(autoincrement())
  songId      Int      @map("song_id")
  albumId     Int      @map("album_id")
  trackNumber Int?     @map("track_number")
  createdAt   DateTime @default(now()) @map("created_at")
  album       Album    @relation(fields: [albumId], references: [id])
  song        Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@map("song_albums")
}

model SongTag {
  id        Int      @id @default(autoincrement())
  songId    Int      @map("song_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@unique([songId, tagId])
  @@map("song_tags")
}

model Performance {
  id                   Int                   @id @default(autoincrement())
  setId                Int                   @map("set_id")
  songId               Int                   @map("song_id")
  performanceOrder     Int                   @map("performance_order")
  seguesInto           Boolean               @default(false) @map("segues_into")
  isTruncatedStart     Boolean               @default(false) @map("is_truncated_start")
  isTruncatedEnd       Boolean               @default(false) @map("is_truncated_end")
  hasCuts              Boolean               @default(false) @map("has_cuts")
  isPartial            Boolean               @default(false) @map("is_partial")
  publicNotes  String?       @map("public_notes")
  privateNotes String?       @map("private_notes")  
  isSoloHunter         Boolean               @default(false) @map("is_solo_hunter") // NEW
  isLyricalFragment    Boolean               @default(false) @map("is_lyrical_fragment") // NEW
  isMusicalFragment    Boolean               @default(false) @map("is_musical_fragment") // NEW
  isMedley             Boolean               @default(false) @map("is_medley") // NEW
  createdAt            DateTime              @default(now()) @map("created_at")
  isUncertain          Boolean               @default(false) @map("is_uncertain")
  leadVocalsId         Int?                  @map("lead_vocals_id")
  performanceMusicians PerformanceMusician[]
  showBanter         ShowBanter[]
  leadVocals           Musician?             @relation("PerformanceLeadVocals", fields: [leadVocalsId], references: [id])
  set                  Set                   @relation(fields: [setId], references: [id], onDelete: Cascade)
  song                 Song                  @relation(fields: [songId], references: [id])

  @@map("performances")
}

model PerformanceMusician {
  id            Int         @id @default(autoincrement())
  performanceId Int         @map("performance_id")
  musicianId    Int         @map("musician_id")
  instrumentId  Int?        @map("instrument_id")
  publicNotes  String?       @map("public_notes")
  privateNotes String?       @map("private_notes")  
  createdAt     DateTime    @default(now()) @map("created_at")
  instrument    Instrument? @relation(fields: [instrumentId], references: [id])
  musician      Musician    @relation(fields: [musicianId], references: [id])
  performance   Performance @relation(fields: [performanceId], references: [id], onDelete: Cascade)

  @@map("performance_musicians")
}

model Contributor {
  id                Int                @id @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now()) @map("created_at")
  email             String?
  publicNotes  String?       @map("public_notes")
  privateNotes String?       @map("private_notes")  
  eventContributors EventContributor[]
  recordings        Recording[]

  @@map("contributors")
}

model Recording {
  id                Int            @id @default(autoincrement())
  eventId           Int            @map("event_id")
  recordingTypeId   Int?           @map("recording_type_id")
  url               String?        // Keep for edge cases
  lmaIdentifier     String?        @map("lma_identifier")
  losslessLegsId    String?        @map("lossless_legs_id")  
  youtubeVideoId    String?        @map("youtube_video_id")
  description       String?
  shnId             String?        @map("shn_id")
  taper             String?
  contributorId     Int?           @map("contributor_id")
  lengthMinutes     Int?           @map("length_minutes")
  publicNotes       String?        @map("public_notes")
  privateNotes      String?        @map("private_notes")  
  createdAt         DateTime       @default(now()) @map("created_at")
  links             Link[]
  contributor       Contributor?   @relation(fields: [contributorId], references: [id])
  event             Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  recordingType     RecordingType? @relation(fields: [recordingTypeId], references: [id])

  @@map("recordings")
}

model RecordingType {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")
  recordings  Recording[]

  @@map("recording_types")
}

model EventContributor {
  id            Int          @id @default(autoincrement())
  eventId       Int          @map("event_id")
  contributorId Int?         @map("contributor_id")
  description   String?
  publicNotes  String?       @map("public_notes")
  privateNotes String?       @map("private_notes")  
  createdAt     DateTime     @default(now()) @map("created_at")
  contributor   Contributor? @relation(fields: [contributorId], references: [id])
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_contributors")
}

model ShowBanter {
  id             Int      @id @default(autoincrement())
  performanceId  Int      @map("performance_id")
  isBeforeSong   Boolean  @default(false) @map("is_before_song")
  isVerbatim     Boolean  @default(false) @map("is_verbatim")
  banterText     String   @map("banter_text")
  publicNotes  String?       @map("public_notes")
  privateNotes String?       @map("private_notes")  
  createdAt      DateTime @default(now()) @map("created_at")
  
  performance Performance @relation(fields: [performanceId], references: [id])
  
  @@map("show_banter")
}

model MusicianDefaultInstrument {
  id           Int        @id @default(autoincrement())
  musicianId   Int        @map("musician_id")
  instrumentId Int        @map("instrument_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  musician     Musician   @relation(fields: [musicianId], references: [id], onDelete: Cascade)

  @@unique([musicianId, instrumentId])
  @@map("musician_default_instruments")
}

model Link {
  id          Int        @id @default(autoincrement())
  url         String
  title       String?
  description String?
  linkTypeId  Int?     @map("link_type_id")
  linkType    LinkType? @relation(fields: [linkTypeId], references: [id])
  isActive    Boolean    @default(true)
  dateFetched DateTime?  @map("date_fetched")
  isPublic    Boolean    @default(true) @map("is_public")
  createdAt   DateTime   @default(now()) @map("created_at")
  eventId     Int?       @map("event_id")
  songId      Int?       @map("song_id")
  venueId     Int?       @map("venue_id")
  recordingId Int?       @map("recording_id")
  event       Event?     @relation(fields: [eventId], references: [id])
  recording   Recording? @relation(fields: [recordingId], references: [id])
  song        Song?      @relation(fields: [songId], references: [id])
  venue       Venue?     @relation(fields: [venueId], references: [id])

  @@map("links")
}

model LinkType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  links       Link[]

  @@map("link_types")
}